%%% Reltool configuration for the eturnal TURN server.
%%%
%%% In order to generate and run a release:
%%%
%%% $ rebar3 compile
%%% $ mkdir rel include priv
%%% $ sed -i "s/1\\.0\\.0/$(tools/get-version)/" config/reltool.config
%%% $ erl -noinput -eval '
%%%       {ok, Conf} = file:consult("config/reltool.config"),
%%%       {ok, Spec} = reltool:get_target_spec(Conf),
%%%       ok = reltool:eval_target_spec(Spec, code:root_dir(), "rel"),
%%%       halt()'
%%% $ rel/bin/erl -config config/sys
%%%
%%% Note that we usually use Relx for assembling releases, instead.

{sys,
 [{boot_rel, "eturnal"},
  {rel, "eturnal", "1.0.0", % Specify release version.
   [{influx_udp, none},
    {poolboy, none},
    {ulitos, none},
    {prometheus_httpd, none},
    {prometheus, none},
    {accept, none},
    {inets, none},
    {ssl, none},
    eturnal]},
  {lib_dirs, ["_build/default/lib"]},
  {incl_cond, derived},
  {mod_cond, derived},
  {app_file, all},
  {profile, embedded},
  {debug_info, strip},
  {erts, [{incl_cond, exclude}]},
  {app, edoc, [{incl_cond, exclude}]},
  {app, eunit, [{incl_cond, exclude}]},
  {app, mnesia, [{incl_cond, exclude}]},
  {app, runtime_tools, [{incl_cond, exclude}]},
  {app, tools, [{incl_cond, exclude}]},
  {app, xmerl, [{incl_cond, exclude}]},
  {excl_sys_filters, ["^erts.*/(doc|include|lib|man|src)"]}]}.
