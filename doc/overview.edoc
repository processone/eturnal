Documentation for the eturnal STUN/TURN server.

--------------------------------------------------------------------------------
Copyright (c) 2020-2022 Holger Weiss <holger@zedat.fu-berlin.de>.
Copyright (c) 2020-2022 ProcessOne, SARL.
All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--------------------------------------------------------------------------------

@title eturnal Documentation
@version 1.10.1 ({@date})
@copyright 2020-2022 ProcessOne, SARL
@author Holger Weiss

@doc eturnal is a <a
href="https://eturnal.net/documentation/protocol.html#stun">STUN</a> and <a
href="https://eturnal.net/documentation/protocol.html#turn">TURN</a> server
which supports the authentication mechanism described in the <a
href="https://tools.ietf.org/html/draft-uberti-behave-turn-rest-00">REST API for
Access to TURN Services</a> specification. The idea is that WebRTC (or other)
clients receive temporary TURN credentials where the user name is comprised of
the (Unix) expiry timestamp and the password is derived from a {@section secret}
shared between the service generating those credentials and eturnal. The service
offering the credentials <a
href="https://github.com/processone/eturnal/blob/1.10.1/examples/make-credentials">performs</a>
a `Base64(HMAC-SHA1($secret, $timestamp))' operation to generate the ephemeral
password, and eturnal does the same to verify it.

The <a href="https://eturnal.net/documentation/code/readme.html">README.md</a>
file shipped with eturnal should get you started quickly. For details, see the
reference documentation below.

== Installation ==

Docker <a href="https://eturnal.net/documentation/code/docker.html">images</a>
are available on GitHub. Linux/x64 and Linux/arm64 packages for DEB- and
RPM-based distributions can be retrieved <a
href="https://eturnal.net/repositories/">from eturnal.net</a>. On other
Linux/x64 and Linux/arm64 systems, the <a
href="https://eturnal.net/download/linux/installer/">binary release</a> can be
installed as described in this section. For building eturnal from source, see
the <a
href="https://github.com/processone/eturnal/blob/1.10.1/doc/INSTALL.md">INSTALL.md</a>
file shipped with eturnal's <a
href="https://eturnal.net/download/eturnal-1.10.1.tar.gz">source code
archive</a>.

The binary release is installed using the following commands (on AArch64
systems, `x64' must be replaced with `arm64'):

```
curl -O https://eturnal.net/eturnal-1.10.1-linux-x64.run
chmod +x eturnal-1.10.1-linux-x64.run
sudo ./eturnal-1.10.1-linux-x64.run
'''

The installer extracts the release archive into `/opt/eturnal' and creates a
system user called `eturnal'. An example configuration is installed as
`/etc/eturnal.yml' if that file doesn't exist yet. On systemd-managed systems,
a service unit is created and eturnal is started.

If the above commands were used to upgrade eturnal from an earlier version, the
service must be restarted afterwards. On systemd-managed systems:

```
sudo systemctl restart eturnal
'''

For uninstalling eturnal and removing the configuration, run the following
commands:

```
sudo systemctl --now disable eturnal
sudo rm -rf /opt/eturnal
sudo rm /etc/systemd/system/eturnal.service
sudo rm /etc/eturnal.yml
'''

== Global Configuration ==

The eturnal server is configured by editing the `eturnal.yml' file (and
optionally setting one or more {@section Environment Variables}). If
`/etc/eturnal.yml' doesn't exist, eturnal will (by default) search for
`etc/eturnal.yml' within the installation directory. In order to use a different
path, the environment variable {@section ETURNAL_ETC_DIR} can be specified. As
an alternative, the arguments ``-conf file '"/path/to/eturnal.yml"''' (note the
double quoting) can be appended to the `eturnalctl' command line used for <a
href="#daemon">starting up</a> eturnal.

The `eturnal.yml' file uses the <a
href="https://en.wikipedia.org/wiki/YAML">YAML</a> format. YAML is
indentation-sensitive, so care must be taken to indent the configuration
correctly. The options documented below are to be placed within the `eturnal'
section of the configuration file. (This section will usually be the only one in
that file, but the `eturnal.yml' file <em>could</em> also be used to adjust the
behavior of the underlying virtual machine by adding other sections.)

The eturnal server recognizes the following global configuration options.
{@section Module Configuration} options are described below.

=== blacklist ===

<div class="spec">Type: `list of IP addresses/CIDRs' | `default' | `recommended'<br/>
Default: Loopback addresses</div>

The `blacklist' option specifies a list of one or more IPv4 and/or IPv6
addresses and/or CIDR blocks. TURN relaying from or to any of the listed
addresses is refused, unless the address is also matched by a {@section
whitelist} entry. The `blacklist' may also contain the special keyword
`default', which expands to the addresses blocked by default, or the special
keyword `recommended', which expands to the addresses <a
href="https://rtcsec.com/article/cve-2020-26262-bypass-of-coturns-access-control-protection/#further-concerns-what-else">suggested</a>
by <a href="https://www.enablesecurity.com">Enable Security</a>. (As the latter
is a superset of the former, there's no point in listing both.) Note that the
`recommended' addresses include private networks. Therefore, if eturnal is
supposed to serve clients within a local, private network, that network must be
exempted from the `recommended' addresses by adding it to the {@section
whitelist}.

Example:

```
blacklist:
  - "::1"
  - "127.0.0.0/8"
  - "192.0.2.0/24"
  - "98.51.100.0/24"
  - "203.0.113.0/24"
  - "2001:db8::/32"
'''

=== listen ===

<div class="spec">Type: `list of key-value pairs'<br/>
Default: `[::]:3478' (TCP and UDP, TURN enabled)</div>

The `listen' option specifies a list of one or more sockets the eturnal server
listens on. Each `listen' entry holds one or more of the following key-value
pairs:

<ul>
  <li><a name="ip"
         class="cue">`ip:' <em>address</em></a><br/>
      The `ip' <em>address</em> must be a string denoting the IPv4 or IPv6
      address (note that IPv6 addresses with leading `"::"' must be enclosed
      with quotation marks). Specifying `"0.0.0.0"' tells eturnal to listen on
      all IPv4 interfaces. Specifying `"::"' tells eturnal to listen on all IPv6
      interfaces, and possibly also all IPv4 interfaces, depending on the
      operating system (configuration). The default value is `"::"'.</li>
  <li><a name="port"
         class="cue">`port:' <em>number</em></a><br/>
      The `port' <em>number</em> must be between `0' and `65535', and is usually
      between `1024' and `49151'. The default value is `5349' if the {@section
      transport} is set to `tls', otherwise `3478'.</li>
  <li><a name="transport"
         class="cue">`transport:' <em>protocol</em></a><br/>
      The `transport' <em>protocol</em> must be one of `udp', `tcp', `tls', or,
      in order to accept unencrypted TCP and TLS connections on the same port,
      `auto'. The default value is `udp'.</li>
  <li><a name="proxy_protocol"
         class="cue">`proxy_protocol:' <em>flag</em></a><br/>
      If the `proxy_protocol' <em>flag</em> is set to `true', the client IP
      address/port is retrieved from the HAproxy protocol header. This is not
      supported if the `transport' is `udp'. The default value is `false'.</li>
  <li><a name="enable_turn"
         class="cue">`enable_turn:' <em>flag</em></a><br/>
      The `enable_turn' <em>flag</em> must be `true' to enable TURN in addition
      to STUN, or `false' to offer just STUN on this socket. The default value
      is `true'.</li>
</ul>

Example:

```
listen:
  -
    ip: "::"           # This is the default.
    port: 3478         # This is the default for "transport: udp".
    transport: udp     # This is the default.
    enable_turn: true  # This is the default.
  -
    ip: "::"           # This is the default.
    port: 3478         # This is the default for "transport: auto".
    transport: auto    # Default: "udp".
    enable_turn: true  # This is the default.
  -
    ip: "::"           # This is the default.
    port: 5349         # This is the default for "transport: tls".
    transport: tls     # Default: "udp".
    enable_turn: true  # This is the default.
'''

=== log_dir ===

<div class="spec">Type: `path name' | `stdout'<br/>
Default: `log'</div>

This option specifies the directory the `eturnal.log' file is written into.
Alternatively, this option can be set to the special value `stdout', which
configures eturnal to print log messages to the standard output rather than
logging to a file. If this option isn't defined, the value of the envionment
variable {@section LOGS_DIRECTORY} is used instead. If this environment variable
is unset as well, a `log' directory is created within the installation prefix.

=== log_level ===

<div class="spec">Type: `log level'<br/>
Default: `info'</div>

The value of this option determines the amount of output that is logged. Valid
log levels are, ordered from least to most amount of output: `critical',
`error', `warning', `notice', `info', and `debug'.

=== log_rotate_count ===

<div class="spec">Type: `non-negative integer'<br/>
Default: `10'</div>

The value of this option determines the number of rotated log file archives to
keep if the {@section log_rotate_size} option is set to a positive integer value
and the {@section log_dir} option isn't set to `stdout'. Otherwise, this option
is ignored.

=== log_rotate_size ===

<div class="spec">Type: `positive integer' | `unlimited'<br/>
Default: `unlimited'</div>

If this option is set to a positive integer value and the {@section log_dir}
option isn't set to `stdout', internal log rotation is enabled. The value of
this option specifies the log file size limit in bytes. If this limit is
exceeded, the log file is rotated. If this option isn't specified (or set to
`unlimited'), external log rotation tools can be used.

Note: External rotation is detected automatically, so there's no need to notify
eturnal (e.g., by sending a `HUP' signal) after log rotation.

=== max_bps ===

<div class="spec">Type: `positive integer' | `unlimited'<br/>
Default: `unlimited'</div>

This option limits the bandwidth of TCP and TLS connections to the specified
number of bytes per second. If the option isn't specified (or set to
`unlimited'), the bandwith is not limited by eturnal.

=== max_permissions ===

<div class="spec">Type: `positive integer' | `unlimited'<br/>
Default: `10'</div>

This option specifies the maximum number of TURN <a
href="https://tools.ietf.org/html/rfc5766#section-2.3">permissions</a> that may
be created for a given <a
href="https://tools.ietf.org/html/rfc5766#section-2.2">allocation</a>. If it's
set to `unlimited', an arbitrary number of permissions can be created for each
allocation.

=== modules ===

<div class="spec">Type: `map of module configurations'<br/>
Default: `{}'</div>

Modules are enabled by adding them to the `modules' map, where each module name
is specified as the key and the value defines the module's configuration. See
the {@section Module Configuration} section for the available modules and their
configuration options.

Example:

```
modules:
  mod_log_stun: {}
  mod_stats_prometheus: {}
  mod_stats_influx:
    host: localhost
    port: 8089
'''

=== realm ===

<div class="spec">Type: `string'<br/>
Default: `eturnal.net'</div>

This option defines the realm. A realm is <a
href="https://tools.ietf.org/html/rfc5389#section-15.7">required</a> for
authentication as per the STUN/TURN protocols, but with shared {@section secret}
authentication, the actual value of the realm is meaningless. Therefore, this
option can usually be left unspecified.

=== relay_ipv4_addr ===

<div class="spec">Type: `IPv4 address'<br/>
Default: Autodetected IPv4 address (or `none')</div>

This option specifies the IPv4 address used for relaying data from/to TURN
peers. Note that this <em>must</em> be the server's public IPv4 address; i.e.,
it cannot be set to, for example, `"0.0.0.0"'. If this option isn't specified,
the value of the envionment variable {@section ETURNAL_RELAY_IPV4_ADDR} is used
instead. If this environment variable is unset as well, eturnal will try to
autodetect the system's IPv4 address. If this fails, eturnal won't offer TURN
relaying from/to IPv4 peers.

=== relay_ipv6_addr ===

<div class="spec">Type: `IPv6 address'<br/>
Default: Autodetected IPv6 address (or `none')</div>

This option specifies the IPv6 address used for relaying data from/to TURN
peers. Note that this <em>must</em> be the server's public IPv6 address; i.e.,
it cannot be set to, for example, `"::"'. If this option isn't specified,
the value of the envionment variable {@section ETURNAL_RELAY_IPV6_ADDR} is used
instead. If this environment variable is unset as well, eturnal will try to
autodetect the system's IPv6 address. If this fails, eturnal won't offer TURN
relaying from/to IPv6 peers.

=== relay_max_port ===

<div class="spec">Type: `port number'<br/>
Default: `65535'</div>

This option defines the upper bound of the UDP port range to be used for TURN
relaying. The value should usually be (well) above `49152'. If this option isn't
specified, the value of the envionment variable {@section
ETURNAL_RELAY_MAX_PORT} is used instead.

Note that each TURN relay allocation requires a dedicated port, and that several
TURN relays might be allocated for a single, e.g., audio/video call. Therefore,
make sure to keep the port range large enough.

=== relay_min_port ===

<div class="spec">Type: `port number'<br/>
Default: `49152'</div>

This option defines the lower bound of the UDP port range to be used for TURN
relaying. The value should usually be above `49151' and (well) below the
{@section relay_max_port} number. If this option isn't specified, the value of
the envionment variable {@section ETURNAL_RELAY_MIN_PORT} is used instead.

=== run_dir ===

<div class="spec">Type: `path name'<br/>
Default: `run'</div>

This option specifies the directory eturnal will use for storing runtime data.
If this option isn't defined, the value of the envionment variable {@section
RUNTIME_DIRECTORY} is used instead. If this environment variable is unset as
well, a `run' directory is created within the installation prefix.

=== secret ===

<div class="spec">Type: `string' | `list of strings'<br/>
Default: pseudorandom bits</div>

This option defines the shared authentication secret used to derive the
passwords for ephemeral TURN user names as described in the <a
href="https://tools.ietf.org/html/draft-uberti-behave-turn-rest-00">REST API for
Access to TURN Services</a> specification. If this option isn't defined, the
value of the environment variable {@section ETURNAL_SECRET} is used instead. If
this environment variable is unset as well, a pseudorandom secret (which is
<em>not</em> cryptographically secure) is used. If a list of secrets is
specified, credentials derived from any of those will be accepted. This allows
for rotating the secret without invalidating existing credentials.

=== software_name ===

<div class="spec">Type: `string'<br/>
Default: `eturnal'</div>

This option specifies the server <a
href="https://tools.ietf.org/html/rfc5389#section-15.10">software name</a>
announced to clients during the STUN/TURN communication.

=== strict_expiry ===

<div class="spec">Type: `boolean'<br/>
Default: `false'</div>

If the `strict_expiry' option is set to `false', the expiry timestamp of
ephemeral credentials is only checked during TURN session creation. Once
credentials are accepted, clients may continue to use them for refreshing the
existing session beyond the credential expiry time (as long as the configured
shared {@section secret} remains unchanged). If the `strict_expiry' option is
set to `true', expired credentials won't be accepted for refreshing TURN
sessions. The default value is `false'.

=== tls_ciphers ===

<div class="spec">Type: `string' | `list of strings'<br/>
Default: `HIGH:!aNULL:@STRENGTH'</div>

This option can be used to specify a cipher list to be handed over to OpenSSL
for TLS connections. See the <a
href="https://www.openssl.org/docs/manmaster/man1/ciphers.html">openssl-ciphers</a>
manual for a list of permitted cipher strings and their meanings. The ciphers
are either specified as a list or joined into a string using a `:' character as
separator.

=== tls_crt_file ===

<div class="spec">Type: `path name'<br/>
Default: `none'</div>

This option specifies the path to the PEM file containing the certificate
(chain) offered while negotiating TLS connections. The PEM file must be readable
by the user running the eturnal server. The file may also contain the private
key, in which case the {@section tls_key_file} option can be left unspecified.

If the `tls_crt_file' option isn't specified but TLS is enabled for one or more
{@section listen} entries, eturnal will attempt to create a self-signed
certificate during startup. If TLS is to be used for security reasons (rather
than just for circumventing restrictive packet filters), clients may well refuse
to accept such a certificate. Therefore, it's <em>strongly recommended</em> to
specify this option if TLS is enabled.

=== tls_dh_file ===

<div class="spec">Type: `path name'<br/>
Default: `none'</div>

The `tls_dh_file' option specifies the path to a PEM file holding DH parameters
to be used instead of the default DH parameters. The file could be created using
a command such as `openssl dhparam -out dh-parameters.pem 4096'.

=== tls_key_file ===

<div class="spec">Type: `path name'<br/>
Default: `none'</div>

This option specifies the path to the PEM file containing the private key used
while negotiating TLS connections. The PEM file must be readable by the user
running the eturnal server.

If a {@section tls_crt_file} but no `tls_key_file' is specified, it is assumed
that the {@section tls_crt_file} contains both the certificate chain and the
private key.

=== tls_options ===

<div class="spec">Type: `string' | `list of strings'<br/>
Default: `cipher_server_preference'</div>

This setting can be used to specify options to be handed over to OpenSSL for TLS
connections. See the <a
href="https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_options.html">SSL_CTX_set_options</a>
manual for details on the available options. They are specified in lower case
and without `SSL_OP_' prefix, either as a list or combined into a string using a
`|' character as separator.

Example:

```
tls_options:
  - no_tlsv1
  - no_tlsv1_1
  - cipher_server_preference
'''

=== whitelist ===

<div class="spec">Type: `list of IP addresses/CIDRs'<br/>
Default: `[]'</div>

The `whitelist' option specifies a list of one or more IPv4 and/or IPv6
addresses and/or CIDR blocks. TURN relaying from or to any of the listed
addresses is permitted even if the address would otherwise be rejected due to
being matched by a {@section blacklist} entry.

```
whitelist:
  - "203.0.113.113"
  - "2001:db8::/64"
'''

== Module Configuration ==

The eturnal server ships the following modules, which can be configured as
described in this section.

=== mod_log_stun ===

This module enables logging of STUN queries. Without this module, STUN requests
only show up in the `debug' output.

==== level ====

<div class="spec">Type: `log level'<br/>
Default: `info'</div>

The value of this option determines the level used for logging STUN requests.
Valid log levels are `critical', `error', `warning', `notice', `info', and
`debug'.

=== mod_stats_influx ===

This module logs STUN/TURN events/statistics into InfluxDB. It requires an
InfluxDB database (created with an arbitrary name) to be accessible via UDP, and
has the following configuration options:

==== host ====

<div class="spec">Type: `string' | `IP address'<br/>
Default: `localhost'</div>

This option specifies the host name or IP address InfluxDB's UDP service is
listening on.

==== port ====

<div class="spec">Type: `port number'<br/>
Default: `8089'</div>

This option specifies the port number InfluxDB's UDP service is listening on.

=== mod_stats_prometheus ===

This module exposes various STUN/TURN and (by default) virtual machine metrics
to Prometheus via HTTP under the `/metrics' endpoint.

==== ip ====

<div class="spec">Type: `IP address' | `any'<br/>
Default: `any'</div>

This option specifies the IPv4 or IPv6 address the module is listening on (note
that IPv6 addresses with leading `"::"' must be enclosed with quotation marks).
The default value is `any', which configures the module to listen on all
available interfaces.

==== port ====

<div class="spec">Type: `port number'<br/>
Default: `8081'</div>

This option specifies the port number the module is listening on. The default
value is `8081'.

==== tls ====

<div class="spec">Type: `boolean'<br/>
Default: `false'</div>

If this option is set to `true', the module accepts only TLS-encrypted HTTPS
connections. The default value is `false', which configures the module to use
unencrypted HTTP connections instead.

==== tls_crt_file ====

<div class="spec">Type: `path name'<br/>
Default: `none'</div>

This option specifies the path to the PEM file containing the certificate
(chain) offered while negotiating HTTPS connections. The PEM file must be
readable by the user running the eturnal server. The file may also contain the
private key, in which case the `tls_key_file' option can be left unspecified.

If this option isn't specified but `tls' is enabled, the module will fall back
to using the global {@section tls_crt_file} setting. If that doesn't point to a
PEM file either, eturnal will attempt to create a self-signed certificate during
startup. However, it's <em>strongly recommended</em> to specify this option if
TLS is enabled.

==== tls_key_file ====

<div class="spec">Type: `path name'<br/>
Default: `none'</div>

This option specifies the path to the PEM file containing the private key used
while negotiating HTTPS connections. The PEM file must be readable by the user
running the eturnal server. If this option isn't specified but `tls' is enabled,
the module will fall back to using the global {@section tls_key_file} setting.

If a `tls_crt_file' but no `tls_key_file' is specified, it is assumed that the
`tls_crt_file' contains both the certificate chain and the private key.

==== vm_metrics ====

<div class="spec">Type: `boolean'<br/>
Default: `true'</div>

If this option is set to `false', omit metrics describing the state of the
underlying virtual machine. The default value is `true', which tells the module
to include those metrics.

== Environment Variables ==

The eturnal server recognizes the following environment variables.

=== ERL_DIST_PORT ===

The environment variable `ERL_DIST_PORT' specifies the TCP port number used by
the `eturnalctl' command for communicating with eturnal. By default, a random
port is chosen. If this variable is specified, the Erlang Port Mapper Daemon
(EPMD) service is <em>not</em> spawned during eturnal startup, and the {@section
ERL_EPMD_ADDRESS} and {@section ERL_EPMD_PORT} variables are ignored.
`ERL_DIST_PORT' must be set to the same port number during eturnal startup and
when calling `eturnalctl'. Therefore, it's usually most convenient to specify
the `dist_port' variable at the top of the `eturnalctl' script itself. <em>This
feature requires at least Erlang/OTP 23.1 and Rebar3 3.18.0.</em>

=== ERL_EPMD_ADDRESS ===

On eturnal startup, an Erlang Port Mapper Daemon (EPMD) service is spawned (if
it's not running already, and {@section ERL_DIST_PORT} isn't specified). By
default, eturnal lets EPMD listen on `localhost'. Setting the `ERL_EPMD_ADDRESS'
environment variable tells EPMD to listen on the specified comma-seperated list
of IP addresses instead. Note that the IPv4 and IPv6 loopback addresses are
implicitly added to this list if not specified. Setting `ERL_EPMD_ADDRESS' to an
empty value lets EPMD listen on all interfaces.

=== ERL_EPMD_PORT ===

Setting this environment variable tells EPMD to listen on the specified port. By
default, EPMD listens on port 4369. `ERL_EPMD_PORT' must be set to the same port
number during eturnal startup and when calling `eturnalctl'.

=== ETURNAL_ETC_DIR ===

This environment variable specifies the directory containing the `eturnal.yml'
configuration file. If, for example, `ETURNAL_ETC_DIR' is set to
`/usr/local/etc', the file `/usr/local/etc/eturnal.yml' will be used.

=== ETURNAL_RELAY_IPV4_ADDR ===

If the {@section relay_ipv4_addr} option isn't specified, this environment
variable defines the IPv4 address used for relaying data from/to TURN peers.

=== ETURNAL_RELAY_IPV6_ADDR ===

If the {@section relay_ipv6_addr} option isn't specified, this environment
variable defines the IPv6 address used for relaying data from/to TURN peers.

=== ETURNAL_RELAY_MAX_PORT ===

If the {@section relay_max_port} option isn't specified, this environment
variable defines the upper bound of the UDP port range to be used for TURN
relaying. The value should usually be (well) above `49152'.

=== ETURNAL_RELAY_MIN_PORT ===

If the {@section relay_min_port} option isn't specified, this environment
variable defines the lower bound of the UDP port range to be used for TURN
relaying. The value should usually be above `49151' and (well) below the
{@section ETURNAL_RELAY_MAX_PORT} number.

=== ETURNAL_SECRET ===

If the {@section secret} option isn't specified, this environment variable
defines the shared authentication secret used to derive the passwords for
ephemeral TURN user names as described in the <a
href="https://tools.ietf.org/html/draft-uberti-behave-turn-rest-00">REST API for
Access to TURN Services</a> specification.

=== LOGS_DIRECTORY ===

If the {@section log_dir} option isn't specified, this environment variable
defines the directory the `eturnal.log' file is written into. Note that <a
href="https://www.freedesktop.org/wiki/Software/systemd/">systemd</a> 235 and
higher set this environment variable if systemd's `[Service]' option
`LogsDirectory' is specified.

=== RUNTIME_DIRECTORY ===

If the {@section run_dir} option isn't specified, this environment variable
defines the directory eturnal will use for storing runtime data. Note that <a
href="https://www.freedesktop.org/wiki/Software/systemd/">systemd</a> 235 and
higher set this environment variable if systemd's `[Service]' option
`RuntimeDirectory' is specified.

== Operation ==

The eturnal server is controlled using the `eturnalctl' command. This command
can be called by the superuser and by the user running the eturnal server. It
can also be called by other users after copying the `~eturnal/.erlang.cookie'
file (where `eturnal' is the user running eturnal) into their `$HOME' directory
and fixing the ownership/permissions of the copy.

See the following list for a subset of the available `eturnalctl' commands:

<ul>
  <li><a name="daemon"
         class="cue">`eturnalctl daemon'</a><br/>
      Start eturnal in the background.</li>
  <li><a name="foreground"
         class="cue">`eturnalctl foreground'</a><br/>
      Start eturnal in the foreground.</li>
  <li><a name="console"
         class="cue">`eturnalctl console'</a><br/>
      Start eturnal in the foreground with an interactive Erlang shell.</li>
  <li><a name="remote_console"
         class="cue">`eturnalctl remote_console'</a><br/>
      Connect to the running eturnal instance with an interactive Erlang
      shell.</li>
  <li><a name="eval"
         class="cue">`eturnalctl eval' <em>code</em></a><br/>
      Let the running eturnal VM evaluate the specified Erlang
      <em>code</em>.</li>
  <li><a name="reload"
         class="cue">`eturnalctl reload'</a><br/>
      Reload the configuration file.</li>
  <li><a name="info"
         class="cue">`eturnalctl info'</a><br/>
      Print some details regarding the running eturnal instance.</li>
  <li><a name="sessions"
         class="cue">`eturnalctl sessions'</a><br/>
      Print the list of currently active TURN sessions.</li>
  <li><a name="sessions-username"
         class="cue">`eturnalctl sessions' <em>username</em></a><br/>
      Print the list of currently active TURN sessions belonging to the given
      <em>username</em>. If TURN credentials of the form `$timestamp:$suffix'
      are used, just the `$suffix' may be specified as <em>username</em>, in
      which case all sessions with that `$suffix' are listed.</li>
  <li><a name="disconnect"
         class="cue">`eturnalctl disconnect' <em>username</em></a><br/>
      Close any TURN session(s) belonging to the given <em>username</em>. If
      TURN credentials of the form `$timestamp:$suffix' are used, just the
      `$suffix' may be specified as <em>username</em>, in which case all
      sessions with that `$suffix' are disconnected.</li>
  <li><a name="credentials"
         class="cue">`eturnalctl credentials'</a><br/>
      Print credentials valid for 24 hours, derived from the (first) configured
      {@section secret}.</li>
  <li><a name="credentials-expiry"
         class="cue">`eturnalctl credentials' <em>expiry</em>[s|m|h|d]
      [<em>suffix</em>]</a><br/>
      Print credentials valid for the given <em>expiry</em> period, derived from
      the (first) configured {@section secret}. An `m', `h', or `d' unit can be
      appended in order to specify the <em>expiry</em> period in minutes, hours,
      or days, respectively. The default unit is seconds. Alternatively, the
      <em>expiry</em> time can be specified as an <a
      href="https://datatracker.ietf.org/doc/html/rfc3339#section-5.6">RFC 3339
      timestamp</a>. If a <em>suffix</em> is specified, it is appended to the
      generated user name, separated from the expiration timestamp with a
      colon.</li>
  <li><a name="password"
         class="cue">`eturnalctl password' <em>username</em></a><br/>
      Print the password for the given <em>username</em>, derived from the
      (first) configured {@section secret}.</li>
  <li><a name="get_loglevel"
         class="cue">`eturnalctl loglevel'</a><br/>
      Print the {@section log_level} of the running eturnal instance.</li>
  <li><a name="set_loglevel"
         class="cue">`eturnalctl loglevel' <em>level</em></a><br/>
      Set the {@section log_level} of the running eturnal instance to
      <em>level</em>.</li>
  <li><a name="version"
         class="cue">`eturnalctl version'</a><br/>
      Print the release version of the running eturnal instance.</li>
  <li><a name="stop"
         class="cue">`eturnalctl stop'</a><br/>
      Stop the running eturnal instance.</li>
</ul>

See `eturnalctl help' for the full list of available commands, and `eturnalctl
help <command>' for details regarding the specified `<command>'.
