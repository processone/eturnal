name: 'Docker: build and publish container images'

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'doc/**'
      - 'docker-k8s/examples/**'
      - 'scripts/get-version'
      - 'windows/**'
      - '**.md'
  schedule:
    - cron: '22 2 */6 * *' # every 6 days to avoid gha cache being evicted

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
#  DOCKERHUB_REPO: processone/eturnal
  PKGREL_FILE: docker-k8s/pkgrel

jobs:

  ## check whether to compile from master branch or from tagged version
  detect-change:
    name: Check for ctr version change
    runs-on: ubuntu-latest
    outputs:
      update: ${{ steps.check_version_changed.outputs.update }}
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      -
        name: Compare versions between commits
        id: check_version_changed
        shell: bash
        run: |
          TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))
          git checkout HEAD^
          TAG_PKGREL_BASELINE=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))
          if [[ "$TAG_PKGREL" != "$TAG_PKGREL_BASELINE" ]]
          then echo "update=true" >> $GITHUB_OUTPUT
          else echo "update=false" >> $GITHUB_OUTPUT
          fi


  ## build musl-libc based binary tarballs for x64/arm64
  build-musl-binary-archives:
    name: ${{ matrix.arch }} - build musl-libc binary archives 
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
      fail-fast: false
    needs: [detect-change]
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - 
        name: Cache toolchain directory
        uses: actions/cache@v3
        with:
          path: ~/build/
          key: ${{runner.os}}-ct-ng-1.25.0-${{ matrix.arch }}-musl

      # performing steps for building binary tarballs from master
      -
        name: Extract version of master branch
        if: needs.detect-change.outputs.update == 'false'
        run: |
          echo "TAG_VERSION=$(echo "$(./scripts/get-version)" | sed -e 's|+|-|')" >> $GITHUB_ENV

      # performing steps for building binary tarballs on release
      -
        name: Extract tag of release to be published/updated and erlang/OTP
        if: needs.detect-change.outputs.update == 'true'
        run: |
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        if: needs.detect-change.outputs.update == 'true'
        with:
          ref: ${{ env.TAG_VERSION }}

      # prepare runner environment and perform binary tarballs build
      -
        name: Install prerequisites
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install makeself build-essential
          # https://github.com/crosstool-ng/crosstool-ng/blob/master/testing/docker/ubuntu22.04/Dockerfile
          sudo apt-get -qq install gcc g++ gperf bison flex texinfo help2man make libncurses5-dev
          sudo apt-get -qq install python3-dev autoconf automake libtool libtool-bin gawk wget bzip2 xz-utils unzip
          sudo apt-get -qq install patch libstdc++6 rsync git meson ninja-build
          # obtain erlang/OTP version
          echo "OTP_VSN=$(awk '/^otp_vsn=/ {{gsub(/[^0-9.]/, ""); print}}' scripts/make-binaries)" >> $GITHUB_ENV
      -
        name: Install erlang/OTP
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.OTP_VSN }}
          version-type: strict
      -
        name: Cache binary archives
        uses: actions/cache@v3
        with:
          path: ~/tarballs/
          key: eturnal-${{ matrix.arch }}-musl-tarballs-${{ env.TAG_VERSION }}
      -
        name: Build binary archives
        run: |
          set -x
          sed -i "s|targets='.*'|targets='${{ matrix.arch }}-linux-musl'|" scripts/make-binaries
          chmod +x scripts/make-binaries
          CHECK_DEPS=false scripts/make-binaries
          mkdir -p ~/tarballs/
          cp eturnal-*.tar.gz ~/tarballs


  ## Test the musl-libc tarballs for incompatibilities between musl-libc versions
  ci-ctr-binary-based:
    name: CI - check musl-libc v${{ matrix.musl }} compatibality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        musl: [1.1.16, 1.1.17, 1.1.18, 1.1.19, 1.1.20, 1.1.21, 1.1.22, 1.1.23, 1.1.24, 1.2.0, 1.2.1, 1.2.2, 1.2.3, 1.2.4]
        arch: [x86_64]
      fail-fast: false
    needs: [detect-change, build-musl-binary-archives]
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # performing steps for building images from master
      - 
        name: Extract version of master branch
        if: needs.detect-change.outputs.update == 'false'
        run: echo "TAG_VERSION=$(echo "$(./scripts/get-version)" | sed -e 's|+|-|')" >> $GITHUB_ENV
      
      # performing steps for building images on release
      -
        name: Extract tag of release to be published/updated
        if: needs.detect-change.outputs.update == 'true'
        run: echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        if: needs.detect-change.outputs.update == 'true'
        with:
          ref: ${{ env.TAG_VERSION }}
      - 
        name: Get cached binary archives
        uses: actions/cache@v3
        with:
          path: ~/tarballs/
          key: eturnal-${{ matrix.arch }}-musl-tarballs-${{ env.TAG_VERSION }}
      -
        name: Extract test environment variables ...
        run: |
          echo "DOCKERFILE_PATH=$(dirname $(find . -name Dockerfile.ci-musl))" >> $GITHUB_ENV
          # Match the docker platform names
          echo "PLATFORM=$(echo ${{ matrix.arch }} | sed -e 's|x86_64|amd64|;s|aarch64|arm64|')" >> $GITHUB_ENV
          # Test data
          echo "TEST_CONFIG=$(find . -name eturnal-new-otp.yml)" >> $GITHUB_ENV
          echo "SHA512_SUM=$(wget https://musl.libc.org/releases/musl-${{ matrix.musl }}.tar.gz -O - \
                | sha512sum | awk '{print $1}')" >> $GITHUB_ENV
      -
        name: Prepare build context and CI environemnt
        run: |
          mkdir -p ${{ env.DOCKERFILE_PATH }}/tarballs
          cp -r ~/tarballs/eturnal-*.tar.gz ${{ env.DOCKERFILE_PATH }}/tarballs
          cp ${{ env.TEST_CONFIG }} $PWD/eturnal.yml
          echo "  log_dir: stdout" >> $PWD/eturnal.yml
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - 
        name: Build CI image ...
        run: |
          docker buildx build --load \
                --platform linux/${{ env.PLATFORM }} \
                -f ${{ env.DOCKERFILE_PATH }}/Dockerfile.ci-musl \
                --build-arg MUSL_VSN=${{ matrix.musl }} \
                --build-arg SHA512_SUM=${{ env.SHA512_SUM }} \
                -t processone/eturnal:musl-libc-test \
                ${{ env.DOCKERFILE_PATH }}/.
      - 
        name: Start CI container ...
        run: |
          docker run --init -d --name eturnal \
                --platform linux/${{ env.PLATFORM }} \
                --user eturnal \
                -v $PWD/eturnal.yml:/etc/eturnal.yml \
                processone/eturnal:musl-libc-test \
                eturnalctl foreground
          echo ">> sleep shortly to have the service up ..." && sleep 5s
      - 
        name: CI | print eturnal log ...
        run: docker logs eturnal
      - 
        name: CI | send ping to eturnal container ...
        run: docker exec eturnal eturnalctl ping
      - 
        name: CI | perform STUN query ...
        run: docker exec eturnal stun stun.conversations.im 3478
      - 
        name: CI | print binary-archives musl-libc version ...
        run: cat scripts/make-binaries | grep CT_MUSL
      - 
        name: Stop CI container ...
        run: docker stop eturnal

  ## build actual images for x64/arm64 with built binary tarballs
  build-ctr-binary-based:
    name: ${{ matrix.arch }} - build & publish container image (binary-based)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
      fail-fast: false
    needs: [detect-change, build-musl-binary-archives]
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # performing steps for building images from master
      -
        name: Extract version of master branch
        if: needs.detect-change.outputs.update == 'false'
        run: echo "TAG_VERSION=$(echo "$(./scripts/get-version)" | sed -e 's|+|-|')" >> $GITHUB_ENV

      # performing steps for building images on release
      -
        name: Extract tag of release to be published/updated
        if: needs.detect-change.outputs.update == 'true'
        run: |
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        if: needs.detect-change.outputs.update == 'true'
        with:
          ref: ${{ env.TAG_VERSION }}

      # prepare runner for image build
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Get cached binary archives
        uses: actions/cache@v3
        with:
          path: ~/tarballs/
          key: eturnal-${{ matrix.arch }}-musl-tarballs-${{ env.TAG_VERSION }}
      -
        name: Extract Dockerfile.binary path
        run: |
          echo "DOCKERFILE_PATH=$(dirname $(find . -name Dockerfile.binary-musl))" >> $GITHUB_ENV
      -
        name: Copy tarballs to docker build context
        run: |
          mkdir -p ${{ env.DOCKERFILE_PATH }}/tarballs
          cp -r ~/tarballs/eturnal-*.tar.gz ${{ env.DOCKERFILE_PATH }}/tarballs
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
#      -
#        name: Log in to DockerHub
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Obtain input for docker meta data
        run: |
          # Match the docker platform names
          echo "PLATFORM=$(echo ${{ matrix.arch }} | sed -e 's|x86_64|amd64|;s|aarch64|arm64|')" >> $GITHUB_ENV
          # Match our architecture names
          echo "TAGGING=$(echo ${{ matrix.arch }} | sed -e 's|x86_64|x64|;s|aarch64|arm64|')" >> $GITHUB_ENV

      # build/publish on push master
      -
        name: On push master - docker meta
        id: meta-master
        uses: docker/metadata-action@v4
        if: needs.detect-change.outputs.update == 'false'
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#            ${{ env.DOCKERHUB_REPO }}
          tags: |
            edge-${{ env.TAGGING }}
            ${{ env.TAG_VERSION }}-${{ env.TAGGING }}
      -
        name: On push master - build and push ctr image
        uses: docker/build-push-action@v3
        if: needs.detect-change.outputs.update == 'false'
        with:
          context: ${{ env.DOCKERFILE_PATH }}/.
          file: ${{ env.DOCKERFILE_PATH }}/Dockerfile.binary-musl
          platforms: linux/${{ env.PLATFORM }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-master.outputs.tags }}
          labels: ${{ steps.meta-master.outputs.labels }}

      # build/publish on release
      -
        name: On release - docker meta
        id: meta-release
        uses: docker/metadata-action@v4
        if: needs.detect-change.outputs.update == 'true'
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-${{ env.TAGGING }}
            ${{ env.TAG_PKGREL }}-${{ env.TAGGING }}
            ${{ env.TAG_VERSION }}-${{ env.TAGGING }}
            ${{ env.TAG_MINOR }}-${{ env.TAGGING }}
            ${{ env.TAG_MAJOR }}-${{ env.TAGGING }}
      -
        name: On release - build and push ctr image
        uses: docker/build-push-action@v3
        if: needs.detect-change.outputs.update == 'true'
        with:
          context: ${{ env.DOCKERFILE_PATH }}/.
          file: ${{ env.DOCKERFILE_PATH }}/Dockerfile.binary-musl
          platforms: linux/${{ env.PLATFORM }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-release.outputs.tags }}
          labels: ${{ steps.meta-release.outputs.labels }}


  ## build container images for remaining architectures with standard Dockerfile
  build-ctr:
    name: ${{ matrix.arch }} - build & publish container image (non-binary-based)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [i386, armv7, armhf, ppc64le, s390x]
      fail-fast: false
    needs: [detect-change]
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # performing steps for building images from master
      -
        name: Extract version of master branch
        if: needs.detect-change.outputs.update == 'false'
        run: echo "TAG_VERSION=$(echo "$(./scripts/get-version)" | sed -e 's|+|-|')" >> $GITHUB_ENV

      # performing steps for building images on release
      -
        name: Extract tag of release to be published/updated
        if: needs.detect-change.outputs.update == 'true'
        run: |
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        if: needs.detect-change.outputs.update == 'true'
        with:
          ref: ${{ env.TAG_VERSION }}

      # prepare runner for image build
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Extract Dockerfile path
        run: |
          echo "DOCKERFILE_PATH=$(dirname $(find . -name Dockerfile))" >> $GITHUB_ENV
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
#      -
#        name: Log in to DockerHub
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Obtain input for docker meta data
        run: |
          # Match the docker platform names
          echo "PLATFORM=$(echo ${{ matrix.arch }} | sed -e 's|armv7|arm/v7|;s|armhf|arm/v6|;s|i386|386|;s|s390x|s390x|;s|ppc64le|ppc64le|')" >> $GITHUB_ENV

      # build/publish on push master
      -
        name: On push master - docker meta
        id: meta-master
        uses: docker/metadata-action@v4
        if: needs.detect-change.outputs.update == 'false'
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#            ${{ env.DOCKERHUB_REPO }}
          tags: |
            edge-${{ matrix.arch }}
            ${{ env.TAG_VERSION }}-${{ matrix.arch }}
      -
        name: On push master - build and push ctr image
        uses: docker/build-push-action@v3
        continue-on-error: true
        if: needs.detect-change.outputs.update == 'false'
        with:
          build-args: |
            VERSION=master
            REPOSITORY=https://github.com/${{ github.repository }}.git
          context: ${{ env.DOCKERFILE_PATH }}/.
          platforms: linux/${{ env.PLATFORM }}
          load: true
          tags: ${{ steps.meta-master.outputs.tags }}
          labels: ${{ steps.meta-master.outputs.labels }}

      # build/publish on release
      -
        name: On release - docker meta
        id: meta-release
        uses: docker/metadata-action@v4
        if: needs.detect-change.outputs.update == 'true'
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-${{ matrix.arch }}
            ${{ env.TAG_PKGREL }}-${{ matrix.arch }}
            ${{ env.TAG_VERSION }}-${{ matrix.arch }}
            ${{ env.TAG_MINOR }}-${{ matrix.arch }}
            ${{ env.TAG_MAJOR }}-${{ matrix.arch }}
      -
        name: On release - build and push ctr image
        uses: docker/build-push-action@v3
        if: needs.detect-change.outputs.update == 'true'
        with:
          build-args: |
            VERSION=${{ env.TAG_VERSION }}
            REPOSITORY=https://github.com/${{ github.repository }}.git
          context: ${{ env.DOCKERFILE_PATH }}/.
          platforms: linux/${{ env.PLATFORM }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-release.outputs.tags }}
          labels: ${{ steps.meta-release.outputs.labels }}


  ## merge single images to only advertise one image plus tag
  publish-manifest:
    name: Publish image manifest
    runs-on: ubuntu-latest
    needs: [detect-change, build-ctr-binary-based, build-ctr]
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # performing steps to push manifest from master
      -
        name: Extract version of master branch
        if: needs.detect-change.outputs.update == 'false'
        run: echo "TAG_VERSION=$(echo "$(./scripts/get-version)" | sed -e 's|+|-|')" >> $GITHUB_ENV

      # performing steps to push manifest on release
      -
        name: Extract tag of release to be published/updated
        if: needs.detect-change.outputs.update == 'true'
        run: |
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV

      # prepare runner to push manifest
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
#      -
#        name: Log in to DockerHub
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # On push master - merge and publish
      -
        name: On push master - merge and publish
        if: needs.detect-change.outputs.update == 'false'
        run: |
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:edge \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_VERSION }} \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_VERSION }}-x64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_VERSION }}-arm64
#          docker buildx imagetools create \
#            --tag ${{ env.DOCKERHUB_REPO }}:edge \
#            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_VERSION }} \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_VERSION }}-x64 \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_VERSION }}-arm64

      # On release - merge and publish
      -
        name: On release - merge and publish
        if: needs.detect-change.outputs.update == 'true'
        run: |
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_VERSION }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_MINOR }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_MAJOR }} \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }}-x64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }}-i386 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }}-arm64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }}-armv7 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }}-armhf \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }}-ppc64le \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }}-s390x
#          docker buildx imagetools create \
#            --tag ${{ env.DOCKERHUB_REPO }}:latest \
#            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }} \
#            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_VERSION }} \
#            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_MINOR }} \
#            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_MAJOR }} \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }}-x64 \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }}-i386 \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }}-arm64 \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }}-armv7 \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }}-armhf \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }}-ppc64le \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }}-s390x
