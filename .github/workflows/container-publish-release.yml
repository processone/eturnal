name: 'Docker: Publish/update release image'

on:
  push:
    paths:
      - 'docker-k8s/pkgrel'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
#  DOCKERHUB_REPO: processone/eturnal
  PKGREL_FILE: docker-k8s/pkgrel

jobs:
  detect-change:
    name: Check ctr version change
    runs-on: ubuntu-latest
    outputs:
      update: ${{ steps.check_version_changed.outputs.update }}
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      -
        name: Compare versions between commits
        id: check_version_changed
        shell: bash
        run: |
          TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))
          git checkout HEAD^
          TAG_PKGREL_BASELINE=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))
          if [[ "$TAG_PKGREL" != "$TAG_PKGREL_BASELINE" ]]
          then
            echo "update=true" >> $GITHUB_OUTPUT
          else
            echo "update=false" >> $GITHUB_OUTPUT
          fi

  build-x86-64-aarch64-binary-archives:
    name: x86-64 & aarch64 - build binary archives 
    runs-on: ubuntu-latest
    needs: [detect-change]
    if: needs.detect-change.outputs.update == 'true'
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TAG_VERSION }}
      - 
        name: Cache toolchain directory
        uses: actions/cache@v3
        with:
          path: ~/build/
          key: ${{runner.os}}-gnu-ct-ng-1.25.0
      - 
        name: Install prerequisites
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install makeself build-essential
          # https://github.com/crosstool-ng/crosstool-ng/blob/master/testing/docker/ubuntu22.04/Dockerfile
          sudo apt-get -qq install gcc g++ gperf bison flex texinfo help2man make libncurses5-dev
          sudo apt-get -qq install python3-dev autoconf automake libtool libtool-bin gawk wget bzip2 xz-utils unzip
          sudo apt-get -qq install patch libstdc++6 rsync git meson ninja-build
      - 
        name: Cache binary archives
        uses: actions/cache@v3
        with:
          path: ~/tarballs/
          key: ${{runner.os}}-ct-ng-tarballs-${{ env.TAG_PKGREL }}
      - 
        name: Build binary archives
        run: |
          set -x
          sed -i "s|targets='.*'|targets='x86_64-linux-musl aarch64-linux-musl'|" scripts/make-binaries
          chmod +x scripts/make-binaries
          CHECK_DEPS=false scripts/make-binaries
          mkdir -p ~/tarballs/
          cp eturnal-*.tar.gz ~/tarballs

  build-x86-64-aarch64:
    name: x86-64 & aarch64 - publish/update release
    runs-on: ubuntu-latest
    needs: [build-x86-64-aarch64-binary-archives]
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TAG_VERSION }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - 
        name: Get cached binary archives
        uses: actions/cache@v3
        with:
          path: ~/tarballs/
          key: ${{runner.os}}-ct-ng-tarballs-${{ env.TAG_PKGREL }}
      -
        name: Extract Dockerfile.binary path
        run: |
          echo "DOCKERFILE_PATH=$(dirname $(find . -name Dockerfile.binary-musl))" >> $GITHUB_ENV
      -
        name: Copy tarballs to docker build context
        run: |
          mkdir -p ${{ env.DOCKERFILE_PATH }}/tarballs
          cp -r ~/tarballs/eturnal-*.tar.gz ${{ env.DOCKERFILE_PATH }}/tarballs
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
#      -
#        name: Log in to DockerHub
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Docker meta x86-64
        id: meta-x64
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-x86-64
            ${{ env.TAG_PKGREL }}-x86-64
            ${{ env.TAG_VERSION }}-x86-64
            ${{ env.TAG_MINOR }}-x86-64
            ${{ env.TAG_MAJOR }}-x86-64
      -
        name: Build and push x86-64 ctr image
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.DOCKERFILE_PATH }}/.
          file: ${{ env.DOCKERFILE_PATH }}/Dockerfile.binary-musl
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-x64.outputs.tags }}
          labels: ${{ steps.meta-x64.outputs.labels }}
      -
        name: Docker meta aarch64
        id: meta-aarch64
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-aarch64
            ${{ env.TAG_PKGREL }}-aarch64
            ${{ env.TAG_VERSION }}-aarch64
            ${{ env.TAG_MINOR }}-aarch64
            ${{ env.TAG_MAJOR }}-aarch64
      -
        name: Build and push aarch64 ctr image
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.DOCKERFILE_PATH }}/.
          file: ${{ env.DOCKERFILE_PATH }}/Dockerfile.binary-musl
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-aarch64.outputs.tags }}
          labels: ${{ steps.meta-aarch64.outputs.labels }}

  build-i386:
    name: i386 - Build & publish/update release
    runs-on: ubuntu-latest
    needs: [detect-change]
    if: needs.detect-change.outputs.update == 'true'
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TAG_VERSION }}
      -
        name: Extract Dockerfile path
        run: |
          echo "DOCKERFILE_PATH=$(dirname $(find . -name Dockerfile))" >> $GITHUB_ENV
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-i386
            ${{ env.TAG_PKGREL }}-i386
            ${{ env.TAG_VERSION }}-i386
            ${{ env.TAG_MINOR }}-i386
            ${{ env.TAG_MAJOR }}-i386
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
#      -
#        name: Log in to DockerHub
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.TAG_VERSION }}
            REPOSITORY=https://github.com/${{ github.repository }}.git
          context: ${{ env.DOCKERFILE_PATH }}/.
          platforms: linux/386
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-armv7:
    name: armv7 - Build & publish/update release
    runs-on: ubuntu-latest
    needs: [detect-change]
    if: needs.detect-change.outputs.update == 'true'
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TAG_VERSION }}
      -
        name: Extract Dockerfile path
        run: |
          echo "DOCKERFILE_PATH=$(dirname $(find . -name Dockerfile))" >> $GITHUB_ENV
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-armv7
            ${{ env.TAG_PKGREL }}-armv7
            ${{ env.TAG_VERSION }}-armv7
            ${{ env.TAG_MINOR }}-armv7
            ${{ env.TAG_MAJOR }}-armv7
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
#      -
#        name: Log in to DockerHub
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.TAG_VERSION }}
            REPOSITORY=https://github.com/${{ github.repository }}.git
          context: ${{ env.DOCKERFILE_PATH }}/.
          platforms: linux/arm/v7
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-armhf:
    name: armhf - Build & publish/update release
    runs-on: ubuntu-latest
    needs: [detect-change]
    if: needs.detect-change.outputs.update == 'true'
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TAG_VERSION }}
      -
        name: Extract Dockerfile path
        run: |
          echo "DOCKERFILE_PATH=$(dirname $(find . -name Dockerfile))" >> $GITHUB_ENV
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-armhf
            ${{ env.TAG_PKGREL }}-armhf
            ${{ env.TAG_VERSION }}-armhf
            ${{ env.TAG_MINOR }}-armhf
            ${{ env.TAG_MAJOR }}-armhf
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
#      -
#        name: Log in to DockerHub
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.TAG_VERSION }}
            REPOSITORY=https://github.com/${{ github.repository }}.git
          context: ${{ env.DOCKERFILE_PATH }}/.
          platforms: linux/arm/v6
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-ppc64le:
    name: ppc64le - Build & publish/update release
    runs-on: ubuntu-latest
    needs: [detect-change]
    if: needs.detect-change.outputs.update == 'true'
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TAG_VERSION }}
      -
        name: Extract Dockerfile path
        run: |
          echo "DOCKERFILE_PATH=$(dirname $(find . -name Dockerfile))" >> $GITHUB_ENV
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-ppc64le
            ${{ env.TAG_PKGREL }}-ppc64le
            ${{ env.TAG_VERSION }}-ppc64le
            ${{ env.TAG_MINOR }}-ppc64le
            ${{ env.TAG_MAJOR }}-ppc64le
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
#      -
#        name: Log in to DockerHub
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.TAG_VERSION }}
            REPOSITORY=https://github.com/${{ github.repository }}.git
          context: ${{ env.DOCKERFILE_PATH }}/.
          platforms: linux/ppc64le
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-s390x:
    name: s390x - Build & publish/update release
    runs-on: ubuntu-latest
    needs: [detect-change]
    if: needs.detect-change.outputs.update == 'true'
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TAG_VERSION }}
      -
        name: Extract Dockerfile path
        run: |
          echo "DOCKERFILE_PATH=$(dirname $(find . -name Dockerfile))" >> $GITHUB_ENV
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-s390x
            ${{ env.TAG_PKGREL }}-s390x
            ${{ env.TAG_VERSION }}-s390x
            ${{ env.TAG_MINOR }}-s390x
            ${{ env.TAG_MAJOR }}-s390x
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
#      -
#        name: Log in to DockerHub
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.TAG_VERSION }}
            REPOSITORY=https://github.com/${{ github.repository }}.git
          context: ${{ env.DOCKERFILE_PATH }}/.
          platforms: linux/s390x
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  publish-manifest:
    name: Publish image manifest
    runs-on: ubuntu-latest
    needs: [build-x86-64-aarch64, build-i386, build-armv7, build-armhf, build-ppc64le, build-s390x]
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
#      -
#        name: Log in to DockerHub
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Merge and publish
        run: |
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_VERSION }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_MINOR }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_MAJOR }} \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }}-x86-64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }}-i386 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }}-aarch64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }}-armv7 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }}-armhf \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }}-ppc64le \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_PKGREL }}-s390x
#          docker buildx imagetools create \
#            --tag ${{ env.DOCKERHUB_REPO }}:latest \
#            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }} \
#            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_VERSION }} \
#            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_MINOR }} \
#            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_MAJOR }} \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }}-x86-64 \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }}-i386 \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }}-aarch64 \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }}-armv7 \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }}-armhf \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }}-ppc64le \
#              ${{ env.DOCKERHUB_REPO }}:${{ env.TAG_PKGREL }}-s390x
